all_col_qc
example_sce <- SingleCellExperiment(
assays = list(counts = sc_example_counts),
colData = sc_example_cell_info
)
example_sce <- calculateQCMetrics(example_sce,
feature_controls = list(MT = 500:1000),
cell_controls = list(empty = 1:5, damaged = 31:40))
all_col_qc <- colnames(colData(example_sce))
all_col_qc <- all_col_qc[grep("MT", all_col_qc)]
all_col_qc
rownames(example_sce)
rownames(example_sce)[500:1000]
mt <- rownames(example_sce)[500:1000]
ata("sc_example_counts")
data("sc_example_cell_info")
example_sce <- SingleCellExperiment(
assays = list(counts = sc_example_counts),
colData = sc_example_cell_info)
data("sc_example_counts")
data("sc_example_cell_info")
example_sce <- SingleCellExperiment(
assays = list(counts = sc_example_counts),
colData = sc_example_cell_info)
mt <- rownames(example_sce)[500:1000]
mt
example_sce <- calculateQCMetrics(example_sce,
feature_controls = list(MT = mt),
cell_controls = list(empty = 1:5))
write(mt, file="scater_mt.txt", sep="\n")
dirname()
pwd()
getwd()
anno <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_anno.txt", sep = "\t", header=TRUE)
reads <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_counts.txt", sep = "\t", header=TRUE)
mt <- readLines("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_mt.txt")
sce <- SingleCellExperiment(assays = list(counts = as.matrix(reads)), colData = anno)
sce <- calculateQCMetrics(sce,feature_controls = list(MT=mt))
runPCA(sce)
sce <- normalize(sce)
runPCA(sce)
anno <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_anno.txt", sep = "\t", header=TRUE)
reads <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_counts.txt", sep = "\t", header=TRUE)
mt <- readLines("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_mt.txt")
sce <- SingleCellExperiment(assays = list(counts = as.matrix(reads)), colData = anno)
sce <- calculateQCMetrics(sce,feature_controls = list(MT=mt))
sce<-runPCA(sce, use_coldata = TRUE, detect_outliers = TRUE, return_sce = TRUE)
sce$use
sce$outlier
sce$!outlier
!sce$outlier
setwd("/Users/ethering/projects/single_cell/Galaxy/galaxy_tools/data")
reads <- read.table('Expression_matrix.txt', sep = "\t", header = TRUE)
anno <- read.table('annotation.txt', sep = "\t", header = TRUE)
mts <- readLines("Mt_Pt_groups.txt", warn=TRUE)
control <- readLines("empty_control_cells.txt", warn=TRUE)
reads_sce <- SingleCellExperiment(assays = list(counts = as.matrix(reads)), colData = anno)
sce <- calculateQCMetrics(reads_sce, feature_controls = list(MT = mts), cell_controls = list(empty = control))
suppressPackageStartupMessages(require(scater))
suppressPackageStartupMessages(require(SingleCellExperiment))
suppressPackageStartupMessages(require(workflowscriptscommon))
suppressPackageStartupMessages(require(optparse))
sce <- calculateQCMetrics(reads_sce, feature_controls = list(MT = mts), cell_controls = list(empty = control))
nrow(counts(sce))
sce <- runPCA(sce, use_coldata = TRUE, detect_outliers = TRUE, return_sce = TRUE)
!sce$outlier
anno <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/tung/annotation.txt", sep = "\t", header=TRUE)
reads <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/tung/reads.txt", sep = "\t", header=TRUE)
mt <- readLines("~/projects/single_cell/Galaxy/galaxy_tools/data/tung/mt.txt")
sce <- SingleCellExperiment(assays = list(counts = as.matrix(reads)), colData = anno)
feature_expressed <- nexprs(sce, detection_limit = 4, byrow=TRUE) > 4
sce <- sce[feature_expressed, ]
sce <- calculateQCMetrics(sce,feature_controls = list(MT=mt))
sce <- runPCA(sce, use_coldata = TRUE, detect_outliers = TRUE, return_sce = TRUE)
anno <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_anno.txt", sep = "\t", header=TRUE)
reads <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_counts.txt", sep = "\t", header=TRUE)
mt <- readLines("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_mt.txt")
sce <- SingleCellExperiment(assays = list(counts = as.matrix(reads)), colData = anno)
sce <- calculateQCMetrics(sce,feature_controls = list(MT=mt))
sce <- runPCA(sce, use_coldata = TRUE, detect_outliers = TRUE, return_sce = TRUE)
!sce$outlier
plotPCA(sce)
sce <- normalize(sce)
plotPCA(sce)
sce <- runPCA(sce, use_coldata = TRUE, detect_outliers = TRUE, return_sce = TRUE)
!sce$outlier
system("/Users/ethering/projects/single_cell/Galaxy/galaxy_tools/RCode/test_scater/scater_modules_1.8.4/scater-create-qcmetric-ready-sce.R -a ~/projects/single_cell/Galaxy/galaxy_tools/data/Expression_matrix.txt -c ~/projects/single_cell/Galaxy/galaxy_tools/data/annotation.txt -l  ~/projects/single_cell/Galaxy/galaxy_tools/data/empty_control_cells.txt -f /Users/ethering/projects/single_cell/Galaxy/galaxy_tools/data/Mt_Pt_groups.txt  -o ~/projects/single_cell/Galaxy/galaxy_tools/data/test_qcready_sce.rds")
system("/Users/ethering/projects/single_cell/Galaxy/galaxy_tools/RCode/test_scater/scater_modules_1.8.4/scater-create-qcmetric-ready-sce.R -a ~/projects/single_cell/Galaxy/galaxy_tools/data/Expression_matrix.txt -c ~/projects/single_cell/Galaxy/galaxy_tools/data/annotation.txt -l  ~/projects/single_cell/Galaxy/galaxy_tools/data/empty_control_cells.txt -f /Users/ethering/projects/single_cell/Galaxy/galaxy_tools/data/Mt_Pt_groups.txt  -o ~/projects/single_cell/Galaxy/galaxy_tools/data/test_qcready_sce.rds")
source("https://bioconductor.org/biocLite.R")
anno <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_anno.txt", sep = "\t", header=TRUE)
reads <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_counts.txt", sep = "\t", header=TRUE)
mt <- readLines("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_mt.txt")
sce <- SingleCellExperiment(assays = list(counts = as.matrix(reads)), colData = anno)
sce <- calculateQCMetrics(sce,feature_controls = list(MT=mt))
suppressPackageStartupMessages(require(scater))
suppressPackageStartupMessages(require(SingleCellExperiment))
suppressPackageStartupMessages(require(workflowscriptscommon))
suppressPackageStartupMessages(require(optparse))
anno <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_anno.txt", sep = "\t", header=TRUE)
reads <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_counts.txt", sep = "\t", header=TRUE)
mt <- readLines("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_mt.txt")
sce <- SingleCellExperiment(assays = list(counts = as.matrix(reads)), colData = anno)
sce <- calculateQCMetrics(sce,feature_controls = list(MT=mt))
sce <- runPCA(sce, use_coldata = TRUE, detect_outliers = TRUE, return_sce = TRUE)
sce$use <- !sce$outlier
table(sce$use)
sce <- sce[, colData(sce)$use]
summary(sce)
total_counts <- sce$total_counts
total_features <- sce$total_features
count_feats <- cbind(total_counts, total_features)
cf_dm <- as.data.frame(count_feats)
plot <- ggplot(cf_dm, aes(x=total_counts/1e6, y=total_features)) + geom_point(shape=1) + geom_smooth() + xlab("Read count (millions)") +
ylab("Gene count") + ggtitle("Scatterplot of reads vs genes")
#calculate binwidths for reads and features plots
read_bins <- max(total_counts/1e6)/20
feat_bins <- max(total_features)/20
#make the plots
plot1 <- qplot(total_counts/1e6, geom="histogram", binwidth = read_bins, ylab="Number of cells", xlab = "Read counts (millions)", fill=I("darkseagreen3"))
plot2 <- qplot(total_features, geom="histogram", binwidth = feat_bins, ylab="Number of cells", xlab = "Feature counts", fill=I("darkseagreen3"))
#arrange them all together
library(ggpubr)
final_plot <- ggarrange(ggarrange(plot1, plot2, ncol=2),plot, nrow=2)
final_plot
final_plot
sce <- calculateQCMetrics(reads_sce, feature_controls = list(MT = mts), cell_controls = list(empty = control))
nrow(counts(sce))
## Filter out unexpressed features
gene_expressed <- nexprs(sce, detection_limit = 4, byrow=TRUE) > 0
man_sce <- sce[gene_expressed, ]
nrow(counts(man_sce))
ncol(man_sce)
man_sce$use <- man_sce$total_counts > 1000
table(man_sce$use)
man_sce <- man_sce[, colData(man_sce)$use]
nrow(counts(man_sce))
ncol(man_sce)
table(man_sce$use)
man_sce$use <- man_sce$pct_counts_MT < 25
man_sce <- man_sce[, colData(man_sce)$use]
table(man_sce$use)
table(man_sce$use)
#Plot
total_counts <- sce$total_counts
total_features <- sce$total_features
count_feats <- cbind(total_counts, total_features)
cf_dm <- as.data.frame(count_feats)
plot <- ggplot(cf_dm, aes(x=total_counts/1e6, y=total_features)) + geom_point(shape=1) + geom_smooth() + xlab("Read count (millions)") +
ylab("Gene count") + ggtitle("Scatterplot of reads vs genes")
#calculate binwidths for reads and features plots
read_bins <- max(total_counts/1e6)/20
feat_bins <- max(total_features)/20
#make the plots
plot1 <- qplot(total_counts/1e6, geom="histogram", binwidth = read_bins, ylab="Number of cells", xlab = "Read counts (millions)", fill=I("darkseagreen3"))
plot2 <- qplot(total_features, geom="histogram", binwidth = feat_bins, ylab="Number of cells", xlab = "Feature counts", fill=I("darkseagreen3"))
#arrange them all together
library(ggpubr)
final_plot <- ggarrange(ggarrange(plot1, plot2, ncol=2),plot, nrow=2)
final_plot
sce <- calculateQCMetrics(reads_sce, feature_controls = list(MT = mts), cell_controls = list(empty = control))
nrow(counts(sce))
## Filter out unexpressed features
gene_expressed <- nexprs(sce, detection_limit = 4, byrow=TRUE) > 0
man_sce <- sce[gene_expressed, ]
nrow(counts(man_sce))
ncol(man_sce)
man_sce$use <- man_sce$total_counts > 100000
table(man_sce$use)
man_sce <- man_sce[, colData(man_sce)$use]
nrow(counts(man_sce))
ncol(man_sce)
table(man_sce$use)
man_sce$use <- man_sce$pct_counts_MT < 25
man_sce <- man_sce[, colData(man_sce)$use]
table(man_sce$use)
total_counts <- sce$total_counts
total_features <- sce$total_features
count_feats <- cbind(total_counts, total_features)
cf_dm <- as.data.frame(count_feats)
plot <- ggplot(cf_dm, aes(x=total_counts/1e6, y=total_features)) + geom_point(shape=1) + geom_smooth() + xlab("Read count (millions)") +
ylab("Gene count") + ggtitle("Scatterplot of reads vs genes")
#calculate binwidths for reads and features plots
read_bins <- max(total_counts/1e6)/20
feat_bins <- max(total_features)/20
#make the plots
plot1 <- qplot(total_counts/1e6, geom="histogram", binwidth = read_bins, ylab="Number of cells", xlab = "Read counts (millions)", fill=I("darkseagreen3"))
plot2 <- qplot(total_features, geom="histogram", binwidth = feat_bins, ylab="Number of cells", xlab = "Feature counts", fill=I("darkseagreen3"))
#arrange them all together
library(ggpubr)
final_plot <- ggarrange(ggarrange(plot1, plot2, ncol=2),plot, nrow=2)
final_plot
sce <- calculateQCMetrics(reads_sce, feature_controls = list(MT = mts), cell_controls = list(empty = control))
nrow(counts(sce))
## Filter out unexpressed features
gene_expressed <- nexprs(sce, detection_limit = 4, byrow=TRUE) > 0
man_sce <- sce[gene_expressed, ]
nrow(counts(man_sce))
ncol(man_sce)
man_sce$use <- man_sce$total_counts > 100000
table(man_sce$use)
man_sce <- man_sce[, colData(man_sce)$use]
nrow(counts(man_sce))
ncol(man_sce)
table(man_sce$use)
man_sce$use <- man_sce$pct_counts_MT < 25
man_sce <- man_sce[, colData(man_sce)$use]
table(man_sce$use)
#Plot
total_counts <- sce$total_counts
total_features <- sce$total_features
count_feats <- cbind(total_counts, total_features)
cf_dm <- as.data.frame(count_feats)
plot <- ggplot(cf_dm, aes(x=total_counts/1e6, y=total_features)) + geom_point(shape=1) + geom_smooth() + xlab("Read count (millions)") +
ylab("Gene count") + ggtitle("Scatterplot of reads vs genes")
#calculate binwidths for reads and features plots
read_bins <- max(total_counts/1e6)/20
feat_bins <- max(total_features)/20
#make the plots
plot1 <- qplot(total_counts/1e6, geom="histogram", binwidth = read_bins, ylab="Number of cells", xlab = "Read counts (millions)", fill=I("darkseagreen3"))
plot2 <- qplot(total_features, geom="histogram", binwidth = feat_bins, ylab="Number of cells", xlab = "Feature counts", fill=I("darkseagreen3"))
plot3 <- plotColData(sce, y="pct_counts_MT", x="total_features_by_counts") + ggtitle("% MT genes")
#arrange them all together
library(ggpubr)
final_plot <- ggarrange(plot1, plot2, plot, plot3, ncol=2, nrow=2)
final_plot
sce <- runPCA(sce, use_coldata = TRUE, detect_outliers = TRUE, return_sce = TRUE)
sce$use <- !sce$outlier
table(sce$use)
sce <- sce[, colData(sce)$use]
summary(sce)
#Plot
total_counts <- sce$total_counts
total_features <- sce$total_features
count_feats <- cbind(total_counts, total_features)
cf_dm <- as.data.frame(count_feats)
plot <- ggplot(cf_dm, aes(x=total_counts/1e6, y=total_features)) + geom_point(shape=1) + geom_smooth() + xlab("Read count (millions)") +
ylab("Gene count") + ggtitle("Scatterplot of reads vs genes")
#calculate binwidths for reads and features plots
read_bins <- max(total_counts/1e6)/20
feat_bins <- max(total_features)/20
#make the plots
plot1 <- qplot(total_counts/1e6, geom="histogram", binwidth = read_bins, ylab="Number of cells", xlab = "Read counts (millions)", fill=I("darkseagreen3"))
plot2 <- qplot(total_features, geom="histogram", binwidth = feat_bins, ylab="Number of cells", xlab = "Feature counts", fill=I("darkseagreen3"))
plot3 <- plotColData(sce, y="pct_counts_MT", x="total_features_by_counts") + ggtitle("% MT genes")
#arrange them all together
library(ggpubr)
final_plot <- ggarrange(plot1, plot2, plot, plot3, ncol=2, nrow=2)
final_plot
sce <- calculateQCMetrics(reads_sce, feature_controls = list(MT = mts), cell_controls = list(empty = control))
nrow(counts(sce))
## Filter out unexpressed features
gene_expressed <- nexprs(sce, detection_limit = 10, byrow=TRUE) > 0
man_sce <- sce[gene_expressed, ]
nrow(counts(man_sce))
ncol(man_sce)
man_sce$use <- man_sce$total_counts > 100000
table(man_sce$use)
man_sce <- man_sce[, colData(man_sce)$use]
nrow(counts(man_sce))
ncol(man_sce)
table(man_sce$use)
man_sce$use <- man_sce$pct_counts_MT < 25
man_sce <- man_sce[, colData(man_sce)$use]
table(man_sce$use)
#Plot
total_counts <- sce$total_counts
total_features <- sce$total_features
count_feats <- cbind(total_counts, total_features)
cf_dm <- as.data.frame(count_feats)
plot <- ggplot(cf_dm, aes(x=total_counts/1e6, y=total_features)) + geom_point(shape=1) + geom_smooth() + xlab("Read count (millions)") +
ylab("Gene count") + ggtitle("Scatterplot of reads vs genes")
#calculate binwidths for reads and features plots
read_bins <- max(total_counts/1e6)/20
feat_bins <- max(total_features)/20
#make the plots
plot1 <- qplot(total_counts/1e6, geom="histogram", binwidth = read_bins, ylab="Number of cells", xlab = "Read counts (millions)", fill=I("darkseagreen3"))
plot2 <- qplot(total_features, geom="histogram", binwidth = feat_bins, ylab="Number of cells", xlab = "Feature counts", fill=I("darkseagreen3"))
plot3 <- plotColData(sce, y="pct_counts_MT", x="total_features_by_counts") + ggtitle("% MT genes")
#arrange them all together
library(ggpubr)
final_plot <- ggarrange(plot1, plot2, plot, plot3, ncol=2, nrow=2)
final_plot
suppressPackageStartupMessages(require(scater))
suppressPackageStartupMessages(require(SingleCellExperiment))
suppressPackageStartupMessages(require(workflowscriptscommon))
suppressPackageStartupMessages(require(optparse))
setwd("/Users/ethering/projects/single_cell/Galaxy/galaxy_tools/data")
reads <- read.table('Expression_matrix.txt', sep = "\t", header = TRUE)
anno <- read.table('annotation.txt', sep = "\t", header = TRUE)
mts <- readLines("Mt_Pt_groups.txt", warn=TRUE)
control <- readLines("empty_control_cells.txt", warn=TRUE)
reads_sce <- SingleCellExperiment(assays = list(counts = as.matrix(reads)), colData = anno)
anno <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/tung/annotation.txt", sep = "\t", header=TRUE)
reads <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/tung/reads.txt", sep = "\t", header=TRUE)
mt <- readLines("~/projects/single_cell/Galaxy/galaxy_tools/data/tung/mt.txt")
reads_sce <- SingleCellExperiment(assays = list(counts = as.matrix(reads)), colData = anno)
sce <- calculateQCMetrics(reads_sce,feature_controls = list(MT=mt))
anno <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_anno.txt", sep = "\t", header=TRUE)
reads <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_counts.txt", sep = "\t", header=TRUE)
mt <- readLines("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_mt.txt")
reads_sce <- SingleCellExperiment(assays = list(counts = as.matrix(reads)), colData = anno)
sce <- calculateQCMetrics(sce,feature_controls = list(MT=mt))
reads_sce <- SingleCellExperiment(assays = list(counts = as.matrix(reads)), colData = anno)
sce <- calculateQCMetrics(reads_sce,feature_controls = list(MT=mt))
#Auto filter
sce <- runPCA(sce, use_coldata = TRUE, detect_outliers = TRUE, return_sce = TRUE)
sce$use <- !sce$outlier
table(sce$use)
sce <- sce[, colData(sce)$use]
summary(sce)
total_counts <- sce$total_counts
total_features <- sce$total_features
count_feats <- cbind(total_counts, total_features)
cf_dm <- as.data.frame(count_feats)
plot <- ggplot(cf_dm, aes(x=total_counts/1e6, y=total_features)) + geom_point(shape=1) + geom_smooth() + xlab("Read count (millions)") +
ylab("Gene count") + ggtitle("Scatterplot of reads vs genes")
#calculate binwidths for reads and features plots
read_bins <- max(total_counts/1e6)/20
feat_bins <- max(total_features)/20
#make the plots
plot1 <- qplot(total_counts/1e6, geom="histogram", binwidth = read_bins, ylab="Number of cells", xlab = "Read counts (millions)", fill=I("darkseagreen3"))
plot2 <- qplot(total_features, geom="histogram", binwidth = feat_bins, ylab="Number of cells", xlab = "Feature counts", fill=I("darkseagreen3"))
plot3 <- plotColData(sce, y="pct_counts_MT", x="total_features_by_counts") + ggtitle("% MT genes")
#arrange them all together
library(ggpubr)
final_plot <- ggarrange(plot1, plot2, plot, plot3, ncol=2, nrow=2)
final_plot
sce <- calculateQCMetrics(reads_sce, feature_controls = list(MT = mts), cell_controls = list(empty = control))
nrow(counts(sce))
## Filter out unexpressed features
gene_expressed <- nexprs(sce, detection_limit = 10, byrow=TRUE) > 0
man_sce <- sce[gene_expressed, ]
nrow(counts(man_sce))
ncol(man_sce)
man_sce$use <- man_sce$total_counts > 100000
table(man_sce$use)
man_sce <- man_sce[, colData(man_sce)$use]
nrow(counts(man_sce))
ncol(man_sce)
table(man_sce$use)
man_sce$use <- man_sce$pct_counts_MT < 25
man_sce <- man_sce[, colData(man_sce)$use]
table(man_sce$use)
#Plot
total_counts <- sce$total_counts
total_features <- sce$total_features
count_feats <- cbind(total_counts, total_features)
cf_dm <- as.data.frame(count_feats)
plot <- ggplot(cf_dm, aes(x=total_counts/1e6, y=total_features)) + geom_point(shape=1) + geom_smooth() + xlab("Read count (millions)") +
ylab("Gene count") + ggtitle("Scatterplot of reads vs genes")
#calculate binwidths for reads and features plots
read_bins <- max(total_counts/1e6)/20
feat_bins <- max(total_features)/20
#make the plots
plot1 <- qplot(total_counts/1e6, geom="histogram", binwidth = read_bins, ylab="Number of cells", xlab = "Read counts (millions)", fill=I("darkseagreen3"))
plot2 <- qplot(total_features, geom="histogram", binwidth = feat_bins, ylab="Number of cells", xlab = "Feature counts", fill=I("darkseagreen3"))
plot3 <- plotColData(sce, y="pct_counts_MT", x="total_features_by_counts") + ggtitle("% MT genes")
#arrange them all together
library(ggpubr)
final_plot <- ggarrange(plot1, plot2, plot, plot3, ncol=2, nrow=2)
final_plot
anno <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_anno.txt", sep = "\t", header=TRUE)
reads <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_counts.txt", sep = "\t", header=TRUE)
mt <- readLines("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_mt.txt")
reads_sce <- SingleCellExperiment(assays = list(counts = as.matrix(reads)), colData = anno)
sce <- calculateQCMetrics(reads_sce, feature_controls = list(MT = mts), cell_controls = list(empty = control))
nrow(counts(sce))
## Filter out unexpressed features
gene_expressed <- nexprs(sce, detection_limit = 10, byrow=TRUE) > 0
man_sce <- sce[gene_expressed, ]
nrow(counts(man_sce))
ncol(man_sce)
sce <- calculateQCMetrics(reads_sce, feature_controls = list(MT = mts), cell_controls = list(empty = control))
anno <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_anno.txt", sep = "\t", header=TRUE)
reads <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_counts.txt", sep = "\t", header=TRUE)
mt <- readLines("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_mt.txt")
reads_sce <- SingleCellExperiment(assays = list(counts = as.matrix(reads)), colData = anno)
anno <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_anno.txt", sep = "\t", header=TRUE)
reads <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_counts.txt", sep = "\t", header=TRUE)
mt <- readLines("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_mt.txt")
reads_sce <- SingleCellExperiment(assays = list(counts = as.matrix(reads)), colData = anno)
sce <- calculateQCMetrics(reads_sce, feature_controls = list(MT = mt), cell_controls = list(empty = control))
anno <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_anno.txt", sep = "\t", header=TRUE)
reads <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_counts.txt", sep = "\t", header=TRUE)
mt <- readLines("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_mt.txt")
reads_sce <- SingleCellExperiment(assays = list(counts = as.matrix(reads)), colData = anno)
sce <- calculateQCMetrics(reads_sce,feature_controls = list(MT=mt))
nrow(counts(sce))
## Filter out unexpressed features
gene_expressed <- nexprs(sce, detection_limit = 10, byrow=TRUE) > 0
man_sce <- sce[gene_expressed, ]
nrow(counts(man_sce))
ncol(man_sce)
man_sce$use <- man_sce$total_counts > 100000
table(man_sce$use)
man_sce <- man_sce[, colData(man_sce)$use]
nrow(counts(man_sce))
ncol(man_sce)
table(man_sce$use)
man_sce$use <- man_sce$pct_counts_MT < 25
man_sce <- man_sce[, colData(man_sce)$use]
table(man_sce$use)
total_counts <- sce$total_counts
total_features <- sce$total_features
count_feats <- cbind(total_counts, total_features)
cf_dm <- as.data.frame(count_feats)
plot <- ggplot(cf_dm, aes(x=total_counts/1e6, y=total_features)) + geom_point(shape=1) + geom_smooth() + xlab("Read count (millions)") +
ylab("Gene count") + ggtitle("Scatterplot of reads vs genes")
#calculate binwidths for reads and features plots
read_bins <- max(total_counts/1e6)/20
feat_bins <- max(total_features)/20
#make the plots
plot1 <- qplot(total_counts/1e6, geom="histogram", binwidth = read_bins, ylab="Number of cells", xlab = "Read counts (millions)", fill=I("darkseagreen3"))
plot2 <- qplot(total_features, geom="histogram", binwidth = feat_bins, ylab="Number of cells", xlab = "Feature counts", fill=I("darkseagreen3"))
plot3 <- plotColData(sce, y="pct_counts_MT", x="total_features_by_counts") + ggtitle("% MT genes")
#arrange them all together
library(ggpubr)
final_plot <- ggarrange(plot1, plot2, plot, plot3, ncol=2, nrow=2)
final_plot
total_counts <- man_sce$total_counts
total_features <- man_sce$total_features
count_feats <- cbind(total_counts, total_features)
cf_dm <- as.data.frame(count_feats)
plot <- ggplot(cf_dm, aes(x=total_counts/1e6, y=total_features)) + geom_point(shape=1) + geom_smooth() + xlab("Read count (millions)") +
ylab("Gene count") + ggtitle("Scatterplot of reads vs genes")
#calculate binwidths for reads and features plots
read_bins <- max(total_counts/1e6)/20
feat_bins <- max(total_features)/20
#make the plots
plot1 <- qplot(total_counts/1e6, geom="histogram", binwidth = read_bins, ylab="Number of cells", xlab = "Read counts (millions)", fill=I("darkseagreen3"))
plot2 <- qplot(total_features, geom="histogram", binwidth = feat_bins, ylab="Number of cells", xlab = "Feature counts", fill=I("darkseagreen3"))
plot3 <- plotColData(sce, y="pct_counts_MT", x="total_features_by_counts") + ggtitle("% MT genes")
#arrange them all together
library(ggpubr)
final_plot <- ggarrange(plot1, plot2, plot, plot3, ncol=2, nrow=2)
final_plot
anno <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_anno.txt", sep = "\t", header=TRUE)
reads <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_counts.txt", sep = "\t", header=TRUE)
mt <- readLines("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_mt.txt")
reads_sce <- SingleCellExperiment(assays = list(counts = as.matrix(reads)), colData = anno)
sce <- calculateQCMetrics(reads_sce,feature_controls = list(MT=mt))
nrow(counts(sce))
## Filter out unexpressed features
gene_expressed <- nexprs(sce, detection_limit = 10, byrow=TRUE) > 0
man_sce <- sce[gene_expressed, ]
nrow(counts(man_sce))
ncol(man_sce)
man_sce$use <- man_sce$total_counts > 100000
table(man_sce$use)
man_sce <- man_sce[, colData(man_sce)$use]
nrow(counts(man_sce))
ncol(man_sce)
table(man_sce$use)
man_sce$use <- man_sce$pct_counts_MT < 25
man_sce <- man_sce[, colData(man_sce)$use]
table(man_sce$use)
total_counts <- man_sce$total_counts
total_features <- man_sce$total_features
count_feats <- cbind(total_counts, total_features)
cf_dm <- as.data.frame(count_feats)
plot <- ggplot(cf_dm, aes(x=total_counts/1e6, y=total_features)) + geom_point(shape=1) + geom_smooth() + xlab("Read count (millions)") +
ylab("Gene count") + ggtitle("Scatterplot of reads vs genes")
read_bins <- max(total_counts/1e6)/20
feat_bins <- max(total_features)/20
plot1 <- qplot(total_counts/1e6, geom="histogram", binwidth = read_bins, ylab="Number of cells", xlab = "Read counts (millions)", fill=I("darkseagreen3"))
plot2 <- qplot(total_features, geom="histogram", binwidth = feat_bins, ylab="Number of cells", xlab = "Feature counts", fill=I("darkseagreen3"))
plot3 <- plotColData(sce, y="pct_counts_MT", x="total_features_by_counts") + ggtitle("% MT genes")
#arrange them all together
library(ggpubr)
final_plot <- ggarrange(plot1, plot2, plot, plot3, ncol=2, nrow=2)
final_plot
anno <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_anno.txt", sep = "\t", header=TRUE)
reads <- read.table("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_counts.txt", sep = "\t", header=TRUE)
mt <- readLines("~/projects/single_cell/Galaxy/galaxy_tools/data/scater_inbuilt/scater_mt.txt")
reads_sce <- SingleCellExperiment(assays = list(counts = as.matrix(reads)), colData = anno)
sce <- calculateQCMetrics(reads_sce,feature_controls = list(MT=mt))
nrow(counts(sce))
## Filter out unexpressed features
gene_expressed <- nexprs(sce, detection_limit = 10, byrow=TRUE) > 0
man_sce <- sce[gene_expressed, ]
nrow(counts(man_sce))
ncol(man_sce)
man_sce$use <- man_sce$total_counts > 1000
table(man_sce$use)
man_sce <- man_sce[, colData(man_sce)$use]
nrow(counts(man_sce))
ncol(man_sce)
table(man_sce$use)
man_sce$use <- man_sce$pct_counts_MT < 33
man_sce <- man_sce[, colData(man_sce)$use]
table(man_sce$use)
#Plot
total_counts <- man_sce$total_counts
total_features <- man_sce$total_features
count_feats <- cbind(total_counts, total_features)
cf_dm <- as.data.frame(count_feats)
plot <- ggplot(cf_dm, aes(x=total_counts/1e6, y=total_features)) + geom_point(shape=1) + geom_smooth() + xlab("Read count (millions)") +
ylab("Gene count") + ggtitle("Scatterplot of reads vs genes")
#calculate binwidths for reads and features plots
read_bins <- max(total_counts/1e6)/20
feat_bins <- max(total_features)/20
#make the plots
plot1 <- qplot(total_counts/1e6, geom="histogram", binwidth = read_bins, ylab="Number of cells", xlab = "Read counts (millions)", fill=I("darkseagreen3"))
plot2 <- qplot(total_features, geom="histogram", binwidth = feat_bins, ylab="Number of cells", xlab = "Feature counts", fill=I("darkseagreen3"))
plot3 <- plotColData(sce, y="pct_counts_MT", x="total_features_by_counts") + ggtitle("% MT genes")
#arrange them all together
library(ggpubr)
final_plot <- ggarrange(plot1, plot2, plot, plot3, ncol=2, nrow=2)
final_plot
install.package("ggpubr")
install.packages("ggpubr")
q()
